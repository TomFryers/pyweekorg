# Generated by Django 1.11 on 2018-09-30 14:07


from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion

from django.db import migrations

from ..models import default_verification_key


def address_migrate(apps, schema_editor):
    """Create EmailAddress objects for all user's existing e-mail addresses."""
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    uapp, ucls = settings.AUTH_USER_MODEL.rsplit('.', 1)
    User = apps.get_model(uapp, ucls)
    EmailAddress = apps.get_model('users', 'EmailAddress')
    db_alias = schema_editor.connection.alias

    to_create = []
    for u in User.objects.all():
        to_create.append(
            EmailAddress(
                user=u,
                address=u.email,
#                verified=False,
#                verification_key=default_verification_key()
            )
        )

    EmailAddress.objects.using(db_alias).bulk_create(to_create)


def address_rollback(apps, schema_editor):
    """Delete all previously created EmailAddress objects."""
    EmailAddress = apps.get_model('users', 'EmailAddress')
    db_alias = schema_editor.connection.alias
    EmailAddress.objects.using(db_alias).delete()


def settings_migrate(apps, schema_editor):
    """Create a Settings object for each user."""
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    uapp, ucls = settings.AUTH_USER_MODEL.rsplit('.', 1)
    User = apps.get_model(uapp, ucls)
    UserSettings = apps.get_model('users', 'UserSettings')
    db_alias = schema_editor.connection.alias

    to_create = []
    for u in User.objects.all():
        to_create.append(UserSettings(user=u))

    UserSettings.objects.using(db_alias).bulk_create(to_create)


def settings_rollback(apps, schema_editor):
    """Delete all previously created EmailAddress objects."""
    EmailAddress = apps.get_model('users', 'UserSettings')
    db_alias = schema_editor.connection.alias
    UserSettings.objects.using(db_alias).delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.EmailField(max_length=254)),
                ('verified', models.BooleanField(default=False, editable=False)),
                ('verification_key', models.CharField(editable=False, max_length=32, unique=True, default=default_verification_key)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RunPython(address_migrate, address_rollback),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_contest_updates', models.BooleanField(default=True, help_text=b'Can we e-mail you about contests you are registered in?')),
                ('email_news', models.BooleanField(default=True, help_text=b'Can we e-mail you (rarely) about Pyweek news, such as upcoming competitions?')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RunPython(settings_migrate, settings_rollback),
    ]
